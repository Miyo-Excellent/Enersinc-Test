{"version":3,"sources":["EnersincTable.js","api/getSeries.js","actions.js","App.js","serviceWorker.js","reducers.js","utils.js","configureStore.js","index.js"],"names":["Content","Layout","Header","EnersincTable","props","state","this","getData","columns","data","higher","isLoading","less","type","onClick","disabled","loading","dataSource","onChange","Component","a","fetch","then","json","asyncData","dispatch","payload","getSeries","series","dataSort","_","sortBy","s","length","date","generation","newData","map","d","units","App","pagination","filters","sorter","extra","console","log","title","dataIndex","onFilter","value","record","indexOf","b","parseFloat","sortDirections","render","isHigher","isLess","background","placeholder","style","color","connect","Boolean","window","location","hostname","match","initialState","action","environments","getEnvironment","env","environment","process","isEnvironment","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootNode","document","getElementById","ReactDOM","store","middleware","push","thunk","createStore","rootReducer","applyMiddleware","configureStore","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kSAGQA,EAAoBC,IAApBD,QAASE,EAAWD,IAAXC,OAEIC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAHI,E,2LAOXC,KAAKF,MAAMG,U,qIAGT,IAAD,EAOHD,KAAKF,MAPF,IAELI,eAFK,MAEK,GAFL,MAGLC,YAHK,MAGE,GAHF,OAILC,OAJK,EAKLC,kBALK,WAMLC,KAGF,OACE,kBAAC,IAAD,KACE,kBAACV,EAAD,KACE,kBAAC,IAAD,CACEW,KAAK,UACLC,QAASR,KAAKF,MAAMG,QACpBQ,SAAUJ,EACVK,QAASL,GAJX,eAUF,kBAACX,EAAD,KACE,kBAAC,IAAD,CACEQ,QAASA,EACTS,WACGN,EAAmB,GAAPF,EAEfS,SAAUZ,KAAKF,MAAMc,iB,GAvCUC,aCL3C,wBAAe,sBAAAC,EAAA,sEACPC,MACJ,uGACAC,MAAK,SAACb,GAAD,OAAUA,EAAKc,UAHT,mF,kBCGFC,EAAS,uCAAG,yCAAAJ,EAAA,6DAASK,EAAT,EAASA,UACvB,CACPZ,KAAM,iBACNa,SAAS,IAHY,SAMNC,IANM,QAMnBlB,EANmB,SAQPA,EAAKmB,QAAYnB,EAAKmB,OAAO,IAAQnB,EAAKmB,OAAO,GAAGnB,MAC5DmB,EAASnB,EAAKmB,OAAO,GAAGnB,KAExBoB,EAAWC,IAAEC,OAAOH,GAAQ,eAACI,EAAD,uDAAK,GAAL,OAAYA,EAAE,MAE5CpB,EAAO,KACPF,EAAS,KAEPmB,GAAcA,EAASI,SAC3BrB,EAAO,CAAEsB,KAAML,EAAS,GAAG,GAAIM,WAAYN,EAAS,GAAG,IAEvDnB,EAAS,CACPwB,KAAML,EAASA,EAASI,OAAS,GAAG,GACpCE,WAAYN,EAASA,EAASI,OAAS,GAAG,IAGtCG,EAAUP,EAASQ,KAAI,eAACC,EAAD,uDAAK,GAAL,MAAa,CACxCJ,KAAMI,EAAE,GACRH,WAAYG,EAAE,GACdC,MAAO,MACP7B,SACAE,WAGFa,EAAS,CACPZ,KAAM,WACNa,QAASU,MAIbX,EAAS,CAAEZ,KAAM,WAAYa,QAAS,KAGxCD,EAAS,CACPZ,KAAM,iBACNa,SAAS,IA3CY,2CAAH,sD,kBCOhBc,E,kDACJ,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IAkDRc,SAAW,SAACuB,EAAYC,EAASC,EAAQC,GACvCC,QAAQC,IAAI,SAAUL,EAAYC,EAASC,EAAQC,IAjDnD,EAAKvC,MAAQ,GACb,EAAKG,QAAU,CACb,CACEuC,MAAO,QACPC,UAAW,OACXC,SAAU,SAACC,EAAOC,GAAR,OAAkD,IAA/BA,EAAOjB,KAAKkB,QAAQF,IACjDP,OAAQ,SAACvB,EAAGiC,GAAJ,OAAUC,WAAWlC,EAAEc,MAAQoB,WAAWD,EAAEnB,OACpDqB,eAAgB,CAAC,UAAW,WAE9B,CACER,MAAO,gBACPC,UAAW,aACXC,SAAU,SAACC,EAAOC,GAAR,OAAwD,IAArCA,EAAOhB,WAAWiB,QAAQF,IACvDP,OAAQ,SAACvB,EAAGiC,GAAJ,OAAUjC,EAAEe,WAAakB,EAAElB,YACnCoB,eAAgB,CAAC,UAAW,UAC5BC,OAAQ,SAACrB,EAAYgB,GACnB,IAEIM,EAAWN,EAAOhB,aAAegB,EAAOzC,OAAOyB,WAC/CuB,EAASP,EAAOhB,aAAegB,EAAOvC,KAAKuB,WAE3CwB,EAAa,KAQjB,OANMF,EACJE,EAAa,UACFD,IACXC,EAAa,WAIb,kBAAC,IAAD,CACEC,YAAW,UAAKT,EAAOhB,YACvB0B,MAAO,CAAEF,aAAYG,MAhBX,eAqBlB,CACEf,MAAO,WACPC,UAAW,UA1CE,E,2LAgDX1C,KAAKF,MAAMoB,Y,qIAOT,IAAD,EAMHlB,KAAKF,MANF,IAELK,YAFK,MAEE,GAFF,MAGLC,cAHK,MAGI,KAHJ,MAILC,iBAJK,aAKLC,YALK,MAKE,KALF,EAQP,OACE,kBAAC,EAAD,CACEJ,QAASF,KAAKE,QACdC,KAAMA,EACNC,OAAQA,EACRC,UAAWA,EACXC,KAAMA,EACNL,QAASD,KAAKF,MAAMoB,UACpBN,SAAUZ,KAAKY,e,GAxELC,aAyFH4C,eAXS,eAAC1D,EAAD,uDAAS,GAAT,MAAiB,CACvCM,UAAWN,EAAMM,UACjBC,KAAMP,EAAMO,KACZF,OAAQL,EAAMK,OACdD,KAAMJ,EAAMI,SAGa,SAACgB,GAAD,MAAe,CACxCD,UAAU,WAAD,4BAAE,sBAAAJ,EAAA,sEAAkBI,EAAU,CAAEC,aAA9B,mFAAF,kDAAC,MAGGsC,CAA6CvB,GCvFxCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BClBAC,EAAe,CACnB5D,KAAM,GACNE,WAAW,GAGE,aAAyC,IAA/BN,EAA8B,uDAAtBgE,EAAcC,EAAQ,uCACrD,OAAQA,EAAOzD,MACb,IAAK,WACH,OAAO,eACFR,EADL,CAEEI,KAAM6D,EAAO5C,UAGjB,IAAK,iBACH,OAAO,eACFrB,EADL,CAEEM,UAAW2D,EAAO5C,UAGtB,QACE,OAAOrB,ICnBPkE,EAAe,CAAC,cAAe,cAE9B,SAASC,IAA6B,IAAdC,EAAa,wDACpCC,EAAcD,GAAOE,aAE3B,OAAOC,EAAcF,GAAeA,EAAc,aAO7C,SAASE,EAAcH,GAC5B,OAAsC,IAA/BF,EAAanB,QAAQqB,GCP9B,IAAMI,EACc,kBAAXZ,QAAuBA,OAAOa,qCACjCb,OAAOa,qCAAqC,IAG5CC,ICJN,IAAMC,EAAWC,SAASC,eAAe,QAEzCC,IAAS3B,OACP,kBAAC,IAAD,CAAU4B,MDGG,WACb,IAAMC,EAAa,GAMnB,MDX4B,gBAArBb,KCQLa,EAAWC,KAAKC,KAGXC,YACLC,EACAZ,EAAiBa,IAAe,WAAf,EAAmBL,KCZrBM,IACf,kBAAC,EAAD,OAGFX,GJoHI,kBAAmBY,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.9e71918c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Layout, Table } from 'antd';\n\nconst { Content, Header } = Layout;\n\nexport default class EnersincTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  async componentWillMount() {\n    await this.props.getData();\n  }\n\n  render() {\n    const {\n      columns = [],\n      data = [],\n      higher = null,\n      isLoading = false,\n      less = null,\n    } = this.props;\n\n    return (\n      <Layout>\n        <Header>\n          <Button\n            type=\"primary\"\n            onClick={this.props.getData}\n            disabled={isLoading}\n            loading={isLoading}\n          >\n            Actualizar\n          </Button>\n        </Header>\n\n        <Content>\n          <Table\n            columns={columns}\n            dataSource={\n              !isLoading ? data : []\n            }\n            onChange={this.props.onChange}\n          />\n        </Content>\n      </Layout>\n    );\n  }\n}\n","export default async () =>\n  await fetch(\n    'https://api.eia.gov/series/?api_key=f8e294cce8855b7fa91bbbd11f0e31e4&series_id=ELEC.GEN.ALL-CA-97.M',\n  ).then((data) => data.json());\n","import getSeries from './api/getSeries';\nimport _ from 'lodash';\n\nexport const asyncData = async ({ dispatch }) => {\n  dispatch({\n    type: 'SET_IS_LOADING',\n    payload: true,\n  });\n\n  let data = await getSeries();\n\n  if (!!data && !!data.series && !!data.series[0] && !!data.series[0].data) {\n    const series = data.series[0].data;\n\n    const dataSort = _.sortBy(series, (s = []) => s[1]);\n\n    let less = null;\n    let higher = null;\n\n    if (!!dataSort && !!dataSort.length) {\n      less = { date: dataSort[0][0], generation: dataSort[0][1] };\n\n      higher = {\n        date: dataSort[dataSort.length - 1][0],\n        generation: dataSort[dataSort.length - 1][1],\n      };\n\n      const newData = dataSort.map((d = []) => ({\n        date: d[0],\n        generation: d[1],\n        units: 'kWh',\n        higher,\n        less,\n      }));\n\n      dispatch({\n        type: 'SET_DATA',\n        payload: newData,\n      });\n    }\n  } else {\n    dispatch({ type: 'SET_DATA', payload: [] });\n  }\n\n  dispatch({\n    type: 'SET_IS_LOADING',\n    payload: false,\n  });\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport EnersincTable from './EnersincTable';\n\nimport { asyncData } from './actions';\n\nimport 'antd/dist/antd.css';\nimport { Input } from 'antd';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n    this.columns = [\n      {\n        title: 'Fecha',\n        dataIndex: 'date',\n        onFilter: (value, record) => record.date.indexOf(value) === 0,\n        sorter: (a, b) => parseFloat(a.date) - parseFloat(b.date),\n        sortDirections: ['descend', 'ascend'],\n      },\n      {\n        title: 'GeneraciÃ³n',\n        dataIndex: 'generation',\n        onFilter: (value, record) => record.generation.indexOf(value) === 0,\n        sorter: (a, b) => a.generation - b.generation,\n        sortDirections: ['descend', 'ascend'],\n        render: (generation, record) => {\n          const color = '#000000';\n\n          let isHigher = record.generation === record.higher.generation;\n          let isLess = record.generation === record.less.generation;\n\n          let background = null;\n\n          if (!!isHigher) {\n            background = '#7db65f';\n          } else if (!!isLess) {\n            background = '#5d82d5';\n          }\n\n          return (\n            <Input\n              placeholder={`${record.generation}`}\n              style={{ background, color }}\n            />\n          );\n        },\n      },\n      {\n        title: 'Unidades',\n        dataIndex: 'units',\n      },\n    ];\n  }\n\n  async componentWillMount() {\n    await this.props.asyncData();\n  }\n\n  onChange = (pagination, filters, sorter, extra) => {\n    console.log('params', pagination, filters, sorter, extra);\n  };\n\n  render() {\n    const {\n      data = [],\n      higher = null,\n      isLoading = false,\n      less = null,\n    } = this.props;\n\n    return (\n      <EnersincTable\n        columns={this.columns}\n        data={data}\n        higher={higher}\n        isLoading={isLoading}\n        less={less}\n        getData={this.props.asyncData}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state = {}) => ({\n  isLoading: state.isLoading,\n  less: state.less,\n  higher: state.higher,\n  data: state.data,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  asyncData: async () => await asyncData({ dispatch }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  data: [],\n  isLoading: false,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case 'SET_DATA':\n      return {\n        ...state,\n        data: action.payload,\n      };\n\n    case 'SET_IS_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","// Available environments\nconst environments = ['development', 'production'];\n\nexport function getEnvironment(env = false) {\n  const environment = env || process.env.NODE_ENV;\n\n  return isEnvironment(environment) ? environment : 'production';\n}\n\nexport function isDevelopment() {\n  return getEnvironment() === 'development';\n}\n\nexport function isEnvironment(env) {\n  return environments.indexOf(env) !== -1;\n}\n\nexport function isProduction() {\n  return getEnvironment() === 'production';\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers';\n\nimport { isDevelopment } from './utils';\n\nconst composeEnhancers =\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extensionâs options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose;\n\nexport default function configureStore() {\n  const middleware = [];\n\n  if (isDevelopment()) {\n    middleware.push(thunk);\n  }\n\n  return createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware)),\n  );\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nimport configureStore from './configureStore';\n\nconst rootNode = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n\n  rootNode,\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}